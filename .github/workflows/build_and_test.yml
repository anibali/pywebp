name: Build and test packages

on: [push]

defaults:
  run:
    shell: bash

jobs:
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Build source distribution
        run: |
          python -m pip install build
          python -m build --sdist
      - name: Upload source distribution
        uses: actions/upload-artifact@v3
        with:
          name: sdist-${{ github.sha }}
          path: ./dist/webp-*.tar.gz
          retention-days: 7

  test-sdist:
    name: Test source distribution
    needs: build-sdist
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Fetch source distribution
        uses: actions/download-artifact@v3
        with:
          name: sdist-${{ github.sha }}
          path: dist/
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install the package
        run: |
          python -m pip install dist/webp-*.tar.gz
      - name: Test with pytest
        run: |
          python -m pip install pytest==7.2.1
          pytest tests/

  build-wheels:
    name: Build ${{ matrix.os }} ${{ matrix.cibw_build }} wheels
    needs: build-sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            cibw_archs_linux: x86_64
            cibw_build: "cp3*-manylinux_*"
          - os: ubuntu-20.04
            cibw_archs_linux: x86_64
            cibw_build: "cp3*-muslinux_*"
          - os: ubuntu-20.04
            cibw_archs_linux: x86_64
            cibw_build: "cp3*-manylinux_*"
          - os: ubuntu-20.04
            cibw_archs_linux: x86_64
            cibw_build: "cp3*-muslinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: x86_64
#            cibw_build: "*-musllinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: i686
#            cibw_build: "*-manylinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: i686
#            cibw_build: "*-musllinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: aarch64
#            cibw_build: "*-manylinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: aarch64
#            cibw_build: "*-musllinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: ppc64le
#            cibw_build: "*-manylinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: ppc64le
#            cibw_build: "*-musllinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: s390x
#            cibw_build: "*-manylinux_*"
#          - os: ubuntu-20.04
#            cibw_archs_linux: s390x
#            cibw_build: "*-musllinux_*"
          - os: windows-2019
            cibw_archs_windows: AMD64
            cibw_build: "cp3*-win_amd64"
#          - os: windows-2019
#            cibw_archs_windows: x86
#          - os: windows-2019
#            cibw_archs_windows: ARM64
          - os: macos-11
            cibw_archs_macos: x86_64
            cibw_build: "cp3*-macosx_x86_64"
          - os: macos-11
            cibw_archs_macos: arm64
            cibw_build: "cp3*-macosx_arm64"
          - os: macos-11
            cibw_archs_macos: universal2
            cibw_build: "cp3*-macosx_universal2"
    steps:
      - name: Fetch source distribution
        uses: actions/download-artifact@v3
        with:
          name: sdist-${{ github.sha }}
          path: dist/
      - run: mv dist/webp-*.tar.gz webp.tar.gz
#      - name: Set up QEMU
#        if: runner.os == 'Linux'
#        uses: docker/setup-qemu-action@v2
#        with:
#          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.15.0
        with:
          package-dir: webp.tar.gz
          output-dir: dist
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs_linux }}
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs_windows }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs_macos }}
          # TODO: Use arm64 CI runner when available
          CIBW_TEST_SKIP: "*_arm64"
          CIBW_PROJECT_REQUIRES_PYTHON: '>=3.8'
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ github.sha }}
          path: ./dist/*.whl
          retention-days: 7
